/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.util.logging.Level;
import java.util.logging.Logger;
import model.dao.WingetDAO;

/**
 *
 * @author samue
 */
public class Install extends javax.swing.JFrame {

    WingetDAO wingetDao = new WingetDAO();

    public String app;
    public String install = "winget install ";
//    public String svzip;

    /**
     * Creates new form Install
     */
    public Install() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chk7zip = new javax.swing.JCheckBox();
        lblInstall = new javax.swing.JLabel();
        chkDbeaver = new javax.swing.JCheckBox();
        chkGimp = new javax.swing.JCheckBox();
        chkGit = new javax.swing.JCheckBox();
        chkGChrome = new javax.swing.JCheckBox();
        chkNotepad = new javax.swing.JCheckBox();
        chkOBSProject = new javax.swing.JCheckBox();
        chkOneDrive = new javax.swing.JCheckBox();
        chkSteam = new javax.swing.JCheckBox();
        chkQBittorrent = new javax.swing.JCheckBox();
        chkEpicGames = new javax.swing.JCheckBox();
        chkPython310 = new javax.swing.JCheckBox();
        chkGoogleDrive = new javax.swing.JCheckBox();
        btnClsSelection = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnInstallApp = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        chkMpc = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chk7zip.setText("7zip");

        lblInstall.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInstall.setText("Selecione os programas que deseja instalar");

        chkDbeaver.setText("DBeaver");

        chkGimp.setText("Gimp");

        chkGit.setText("Git");

        chkGChrome.setText("Google Chrome");

        chkNotepad.setText("Notepad++");

        chkOBSProject.setText("OBSProject");

        chkOneDrive.setText("OneDrive");

        chkSteam.setText("Steam");

        chkQBittorrent.setText("qBittorrent");

        chkEpicGames.setText("EpicGames");

        chkPython310.setText("Python 3.10");

        chkGoogleDrive.setText("Google Drive");

        btnClsSelection.setText("Limpar Seleção");
        btnClsSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClsSelectionActionPerformed(evt);
            }
        });

        btnSelectAll.setText("Selecionar Todos");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnInstallApp.setText("Instalar");
        btnInstallApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallAppActionPerformed(evt);
            }
        });

        btnBack.setText("Voltar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        chkMpc.setText("Media Player Classic");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInstall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnInstallApp, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addComponent(btnClsSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnSelectAll)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkDbeaver)
                                    .addComponent(chkGimp)
                                    .addComponent(chkGit)
                                    .addComponent(chkGChrome)
                                    .addComponent(chkEpicGames)
                                    .addComponent(chk7zip)
                                    .addComponent(chkGoogleDrive))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkMpc)
                                    .addComponent(chkOneDrive)
                                    .addComponent(chkOBSProject)
                                    .addComponent(chkPython310)
                                    .addComponent(chkQBittorrent)
                                    .addComponent(chkSteam)
                                    .addComponent(chkNotepad))))
                        .addGap(0, 7, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInstall)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk7zip)
                    .addComponent(chkNotepad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDbeaver)
                    .addComponent(chkOBSProject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEpicGames)
                    .addComponent(chkOneDrive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGimp)
                    .addComponent(chkPython310))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGit)
                    .addComponent(chkQBittorrent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGChrome)
                    .addComponent(chkSteam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGoogleDrive)
                    .addComponent(chkMpc))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClsSelection)
                    .addComponent(btnSelectAll))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnInstallApp))
                .addGap(38, 38, 38))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        back();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnClsSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClsSelectionActionPerformed
        changeSelection(false);
    }//GEN-LAST:event_btnClsSelectionActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        changeSelection(true);
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnInstallAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallAppActionPerformed
        if (chk7zip.isSelected() == true) {
            app = "7zip.7zip";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkDbeaver.isSelected() == true) {
            app = "dbeaver.dbeaver";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkGimp.isSelected() == true) {
            app = "GIMP.GIMP";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkGit.isSelected() == true) {
            app = "Git.Git";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkGChrome.isSelected() == true) {
            app = "Google.Chrome";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkNotepad.isSelected() == true) {
            app = "Notepad++.Notepad++";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkOBSProject.isSelected() == true) {
            app = "OBSProject.OBSStudio";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkOneDrive.isSelected() == true) {
            app = "Microsoft.OneDrive";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkSteam.isSelected() == true) {
            app = "Valve.Steam";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkQBittorrent.isSelected() == true) {
            app = "qBittorrent.qBittorrent";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkEpicGames.isSelected() == true) {
            app = "EpicGames.EpicGamesLauncher";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkPython310.isSelected() == true) {
            app = "Python.Python.3.10";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkGoogleDrive.isSelected() == true) {
            app = "Google.Drive";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chkMpc.isSelected() == true) {
            app = "clsid2.mpc-hc";
            try {
                wingetDao.runCommand(install.concat(app));
            } catch (Exception ex) {
                Logger.getLogger(Install.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        

        back();
    }//GEN-LAST:event_btnInstallAppActionPerformed

    private void changeSelection(boolean selection) {
        chk7zip.setSelected(selection);
        chkDbeaver.setSelected(selection);
        chkEpicGames.setSelected(selection);
        chkGChrome.setSelected(selection);
        chkGimp.setSelected(selection);
        chkGit.setSelected(selection);
        chkGoogleDrive.setSelected(selection);
        chkNotepad.setSelected(selection);
        chkOBSProject.setSelected(selection);
        chkOneDrive.setSelected(selection);
        chkPython310.setSelected(selection);
        chkQBittorrent.setSelected(selection);
        chkSteam.setSelected(selection);
    }

    private void back() {
        Main main = new Main();
        main.setVisible(true);
        dispose();
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Install.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Install.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Install.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Install.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Install().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClsSelection;
    private javax.swing.JButton btnInstallApp;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JCheckBox chk7zip;
    private javax.swing.JCheckBox chkDbeaver;
    private javax.swing.JCheckBox chkEpicGames;
    private javax.swing.JCheckBox chkGChrome;
    private javax.swing.JCheckBox chkGimp;
    private javax.swing.JCheckBox chkGit;
    private javax.swing.JCheckBox chkGoogleDrive;
    private javax.swing.JCheckBox chkMpc;
    private javax.swing.JCheckBox chkNotepad;
    private javax.swing.JCheckBox chkOBSProject;
    private javax.swing.JCheckBox chkOneDrive;
    private javax.swing.JCheckBox chkPython310;
    private javax.swing.JCheckBox chkQBittorrent;
    private javax.swing.JCheckBox chkSteam;
    private javax.swing.JLabel lblInstall;
    // End of variables declaration//GEN-END:variables
}
